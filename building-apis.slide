Building APIs
The Golang UK Conference, London
21 Aug 2015
Tags: APIs, RESTful, JSON, Data, Golang

Mat Ryer
https://github.com/matryer
@matryer

* About me

- Been coding since age 6
- Been Go-ing since `r59`
- Using Go in anger since 2011
- In love with test-driven development
- Founded *Testify* and other less successful packages
- Just joined GrayMeta, Inc.
- Author of Go Programming Blueprints

.image gopher-mat.png

* Book: Go Programming Blueprints

.image go-blueprints.jpg
.image review.png

[[http://bit.ly/goblueprints][http://bit.ly/goblueprints]]

* Building APIs

* When you say API...?

Everything is an API - including:

- Packages
  assert.Equal(a, b, "a should equal b")
- Types
  type Worker struct {
  	Stop() <-chan struct{}
  	Start() error
  }
- Functions
  func Something(in io.Reader, out io.Writer) error

* I'm talking about Web APIs

* Before Go

- I used Ruby
- Scaffolding
  script/generate controller mycontroller new create update edit destroy index show
- I like APIs to be quick
- C#.NET took *ages* to write

* Why Go?

- (Very) rapid dev
- Production ready
.code production_ready.go /START OMIT/,/END OMIT/
- We â™¥ Go

* Going

.image trend.png 300 _

Google trend for "Golang"

* Web API design tips

- Don't be clever
- Be boring and obvious
- Impress with functionality
- Talk JSON
- RESTful over HTTP
- Status codes (200 == OK, 404 == Not Found)
- Version it
  GET /api/v1/wonderful-things/
- SSL (HTTPS) every time (check out Cloudflare.com)
- Make output pretty (human readable)
- Use the web (caching)

* Building APIs in Go

- Use the standard library for as long as possible
- You may not need an external package at all
- Use `http.Handler` and `http.HandlerFunc`

.code handler.go

Remember this signature

  func(w http.ResponseWriter, r *http.Request)

* Code explained

.code production_ready.go 

* http.HandlerFunc

.code handlerfunc.go /START OMIT/,/END OMIT/

* Responding

- Single respond function
- Mirror ServeHTTP signature (even though we're not using *http.Request yet)

.code responding.go /START OMIT/,/END OMIT/

- See github.com/matryer/respond

.code respond-package.go /START OMIT/,/END OMIT/

* Routing

.code routes.go /START OMIT/,/END OMIT/

- Standard library until you need something more

Beware:

- / matches *everything*
- No path parameter parsing
- One handler for every HTTP method

You could code this yourself... or maybe it's a good excuse to use a package?

* Routing package

- Gorilla mux - github.com/gorilla/mux

.code gorilla-mux.go /START OMIT/,/END OMIT/

- see also httprouter - github.com/julienschmidt/httprouter (but it breaks the ServeHTTP signature)

* Datastore

Almost every API will interact with some kind of datastore.

We need to:

- Connect when program is first run (expensive)
- Disconnect when the program is terminated
- Create a session per request (cheap)
- Clean up after each request

* Wrapping handlers

- Take an `http.Handler` (with other things) and return a single `http.Handler`

.code wrapping.go /START OMIT/,/END OMIT/

* Sharing objects across handlers

- Our handler needs a mgo.Session

.play context-problem.go /START OMIT/,/END OMIT/

- This breaks `http.Handler` interface

Enter Gorilla context package - github.com/gorilla/context

- Provides a `map[string]interface{}` per Request
- Easy to clean up (using its own `http.Handler` wrapper)
- Preserves `ServeHTTP` signature
- Use `context.Set` and `context.Get`

* MongoDB wrapper

.code mongodb.go /START OMIT/,/END OMIT/

* Using the MongoDB wrapper

.code mongodb2.go /START OMIT/,/END OMIT/

* Request lifecycle

- Client hits `GET` `\things`
- `mux.Router` passes the request to `WithDB`
- `WithDB` copies database session and stores it in the context
- `WithDB` then calls `handleThingsRead`
- `handleThingsRead` gets the database session from the context, uses it and responds
- Execution then passes back to `WithDB` which exits and the deferred `Close()` function is called - cleaning up the copy
- `context.ClearHandler` then cleans up the context map for this Request

* Shout out: Women who go

- https://twitter.com/womenwhogo

.link http://womenwhogo.org womenwhogo.org

* Questions?